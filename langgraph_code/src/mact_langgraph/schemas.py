"""
Schema definitions for MACT LangGraph implementation.
"""

from typing import List, Dict, Any
from dataclasses import dataclass
from enum import Enum


class ActionType(Enum):
    """Types of actions the agent can take."""
    RETRIEVE = "Retrieve"
    CALCULATE = "Calculate"
    SEARCH = "Search"
    OPERATE = "Operate"
    FINISH = "Finish"


class RewardType(Enum):
    """Types of reward functions for action selection."""
    CONSISTENCY = "consistency"
    LLM = "llm"
    LOGP = "logp"
    ROLLOUT = "rollout"
    COMBINED = "combined"


@dataclass
class TableInfo:
    """Information about a table in the dataset."""
    name: str
    columns: List[str]
    content: List[List[Any]]
    df_code: str = ""
    linear_representation: str = ""

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for serialization."""
        return {
            "name": self.name,
            "columns": self.columns,
            "content": self.content,
            "df_code": self.df_code,
            "linear_representation": self.linear_representation
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "TableInfo":
        """Create from dictionary."""
        return cls(
            name=data["name"],
            columns=data["columns"],
            content=data["content"],
            df_code=data.get("df_code", ""),
            linear_representation=data.get("linear_representation", "")
        )


@dataclass
class ActionCandidate:
    """A candidate action generated by the planner."""
    thought: str
    action: str
    action_type: ActionType
    argument: str
    score: float = 0.0
    raw_response: str = ""

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for serialization."""
        return {
            "thought": self.thought,
            "action": self.action,
            "action_type": self.action_type.value,
            "argument": self.argument,
            "score": self.score,
            "raw_response": self.raw_response
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "ActionCandidate":
        """Create from dictionary."""
        return cls(
            thought=data["thought"],
            action=data["action"],
            action_type=ActionType(data["action_type"]),
            argument=data["argument"],
            score=data.get("score", 0.0),
            raw_response=data.get("raw_response", "")
        )
